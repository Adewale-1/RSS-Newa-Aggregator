import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Adewale Adenle
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Get title,"Empty" is just a placeholder
        String title = "Empty";

        int titleIndex = getChildElement(channel, "title");

        // Check if title tag has an index
        if (titleIndex != -1) {

            // Check if title has a child
            if (channel.child(titleIndex).numberOfChildren() > 0) {

                title = channel.child(titleIndex).child(0).label();

            } else {
                title = "Empty title";

            }
        } else {
            title = "Empty title";

        }

        // Get description,"Empty" is just a placeholder
        String description = "Empty";

        int descriptionIndex = getChildElement(channel, "description");

        // Check if description tag has an index
        if (descriptionIndex != -1) {

            // Check if description has a child
            if (channel.child(descriptionIndex).numberOfChildren() >= 1) {

                // Get the label of description child and assign in to
                // description variable
                description = channel.child(descriptionIndex).child(0).label();

            } else {
                description = "No description";

            }
        } else {
            description = "No description";
        }

        //Get link
        String link = "";

        int linkIndex = getChildElement(channel, "link");

        //Check if description tag has an index
        if (linkIndex != -1) {

            if (channel.child(linkIndex).numberOfChildren() >= 1) {

                //Get the label of link child and assign in to link variable
                link = channel.child(linkIndex).child(0).label();
            } else {
                link = "No link";
            }
        } else {
            link = "No link";
        }

        out.println("<html>");

        out.println("<head>");

        out.println("<title>" + title + "</title>");

        out.println("</head>");

        out.println("<body>");

        out.println("   <h1><a href=\"" + link + "\">" + title + "</a></h1>");

        out.println("   <p>" + description + "</p>");

        out.println("   <table border=\"1\">");

        out.println("       <tr>");

        out.println("           <th>Date</th>");

        out.println("           <th>Source</th>");

        out.println("           <th>News</th>");

        out.println("       </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // Closing tags
        out.println("   </table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // This initialize the tagIndex as -1
        int tagIndex = -1;
        // Check the xml argument is an element
        if (xml.isTag()) {

            int counter = 0;
            int childrenNum = xml.numberOfChildren();
            /*
             * Search for the index of the "tag" parameter, if found, assign
             * index to tagIndex.else output -1
             */
            boolean isFound = false;

            while (counter < childrenNum && !isFound) {

                XMLTree root = xml.child(counter);

                // Check if each index value is equal to tag
                if ((root.label()).equals(tag)) {

                    tagIndex = counter;

                    isFound = true;
                }

                counter++;
            }
        }

        return tagIndex;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("           <tr>");

        // Get Date
        String pubDate = "";

        // Assign the index of Date into pubDate
        int pubDateIndex = getChildElement(item, "pubDate");

        // Check if an index in found
        if (pubDateIndex != -1) {

            // If an index is found, check if pubDate has any children
            if (item.child(pubDateIndex).numberOfChildren() >= 1) {

                // Assign the label of the first child of the Date tag
                pubDate = item.child(pubDateIndex).child(0).label();

            } else {
                pubDate = "No date";
            }
        } else {
            pubDate = "No date";
        }

        out.println("               <td>" + pubDate + "</td>");

        // Get Source
        String source = "No source available";

        String sourceURL = "";

        //Parse through the children 0f the item tag to check for the source tag

        int sourceIndex = getChildElement(item, "source");

        if (sourceIndex != -1) {
            // Check if Source has any children
            if (item.child(sourceIndex).numberOfChildren() > 0) {

                source = item.child(sourceIndex).child(0).label();

                sourceURL = item.child(sourceIndex).attributeValue("url");

                out.println("               <td><a href = \"" + sourceURL
                        + "\">" + source + "</a></td>");
            } else {
                out.print(source);
            }
        } else {
            out.println("               <td>" + source + "</td>");
        }

        // Get news
        String news = "No title";
        // get index of title tag
        int titleIndex = getChildElement(item, "title");

        int descriptionIndex = getChildElement(item, "description");
        /*
         * Check if index is found and if the title tag as any children, else
         * check if the description tag exist and has any children.
         */
        if (titleIndex >= 0 && item.child(titleIndex).numberOfChildren() >= 1) {

            news = item.child(titleIndex).child(0).label();

        } else if (descriptionIndex >= 0
                && item.child(descriptionIndex).numberOfChildren() >= 1) {

            news = item.child(descriptionIndex).child(0).label();

        }

        // Get link
        String link = "";
        int linkIndex = getChildElement(item, "link");
        if (linkIndex > 0) {
            link = item.child(linkIndex).child(0).label();
        }

        out.println("               <td><a href=\"" + link + "\">" + news
                + "</a></td>");

        out.println("           </tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);

        SimpleWriter outputFeed = new SimpleWriter1L(file);

        // Check if the RSS feed is a valid RSS
        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            XMLTree channel = xml.child(0);

            outputHeader(channel, outputFeed);

            /*
             * Check if a tag labeled "item" is found in the children of the xml
             * element, if found, the processItem method is initiated on it.
             */
            for (int i = 0; i < channel.numberOfChildren(); i++) {

                if (channel.child(i).isTag()) {
                    // Check if channel child is an item
                    if (channel.child(i).label().equals("item")) {

                        XMLTree item = channel.child(i);
                        // Process item call
                        processItem(item, outputFeed);
                    }
                }
            }

            outputFooter(outputFeed);

            // Close Streams
            outputFeed.close();

        } else {
            out.println("This is not a valid RSS 2.0 file");
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // Ask for XML file with feed
        out.print("Enter the URL of the RSS 2.0 feed: ");
        String inputURL = in.nextLine();
        XMLTree xml = new XMLTree1(inputURL);

        //Check if the xml has a label - feed
        if (xml.label().equals("feeds") && xml.hasAttribute("title")) {

            // Ask for user output file in .html
            out.print("Enter the name of the output file: ");
            String outputFile = in.nextLine();

            // Declare the a variable to write to file
            SimpleWriter fileOut = new SimpleWriter1L(outputFile);

            // Create index.html page
            fileOut.println("<html>");

            fileOut.println("<head>");

            String title = xml.attributeValue("title");

            fileOut.println("<title>" + title + "</title>");

            fileOut.println("</head>");

            fileOut.println("<body>");

            fileOut.println("   <h2>" + title + "</h2>");

            fileOut.println("   <ul>");

            // Check each child of the feed  and output its url, name and news.
            for (int i = 0; i < xml.numberOfChildren(); i++) {
                //Check for feed
                if (xml.child(i).label().equals("feed")) {

                    //Get url, name and news
                    String url = xml.child(i).attributeValue("url");
                    String name = xml.child(i).attributeValue("name");
                    String news = xml.child(i).attributeValue("file");

                    // ProcessFeed Method call
                    processFeed(url, news, out);

                    fileOut.println("       <li><a href=\"" + news + "\">"
                            + name + "</a></li>");

                }
            }

            // Closing tags
            fileOut.println("   </ul>");

            fileOut.println("</body>");

            fileOut.println("</head>");

            // Close Streams
            fileOut.close();

        } else {
            out.print("No feed found");
        }

        // Close Streams
        in.close();
        out.close();
    }

}
